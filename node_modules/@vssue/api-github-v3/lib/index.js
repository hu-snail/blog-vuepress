import * as tslib_1 from "tslib";
import axios from 'axios';
import { buildURL, concatURL, getCleanURL, parseQuery, } from '@vssue/utils';
import { normalizeUser, normalizeIssue, normalizeComment, normalizeReactions, mapReactionName, } from './utils';
/**
 * Github REST API v3
 *
 * @see https://developer.github.com/v3/
 * @see https://developer.github.com/apps/building-oauth-apps/
 */
var GithubV3 = /** @class */ (function () {
    function GithubV3(_a) {
        var _b = _a.baseURL, baseURL = _b === void 0 ? 'https://github.com' : _b, owner = _a.owner, repo = _a.repo, labels = _a.labels, clientId = _a.clientId, clientSecret = _a.clientSecret, state = _a.state;
        this.baseURL = baseURL;
        this.owner = owner;
        this.repo = repo;
        this.labels = labels;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.state = state;
        this.$http = axios.create({
            baseURL: baseURL === 'https://github.com' ? 'https://api.github.com' : concatURL(baseURL, 'api/v3'),
            headers: {
                'Accept': 'application/vnd.github.v3+json',
            },
        });
        this.$http.interceptors.response.use(function (response) {
            if (response.data.error) {
                return Promise.reject(response.data.error_description);
            }
            return response;
        });
    }
    Object.defineProperty(GithubV3.prototype, "platform", {
        /**
         * The platform api info
         */
        get: function () {
            return {
                name: 'GitHub',
                link: this.baseURL,
                version: 'v3',
                meta: {
                    reactable: true,
                    sortable: false,
                },
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Redirect to the authorization page of platform.
     *
     * @see https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#1-request-a-users-github-identity
     */
    GithubV3.prototype.redirectAuth = function () {
        window.location.href = buildURL(concatURL(this.baseURL, 'login/oauth/authorize'), {
            client_id: this.clientId,
            redirect_uri: window.location.href,
            scope: 'public_repo',
            state: this.state,
        });
    };
    /**
     * Handle authorization.
     *
     * @return A string for access token, `null` for no authorization code
     *
     * @see https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/
     *
     * @remarks
     * If the `code` and `state` exist in the query, and the `state` matches, remove them from query, and try to get the access token.
     */
    GithubV3.prototype.handleAuth = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var query, code, replaceURL, accessToken;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = parseQuery(window.location.search);
                        if (!query.code) return [3 /*break*/, 2];
                        if (query.state !== this.state) {
                            return [2 /*return*/, null];
                        }
                        code = query.code;
                        delete query.code;
                        delete query.state;
                        replaceURL = buildURL(getCleanURL(window.location.href), query) + window.location.hash;
                        window.history.replaceState(null, '', replaceURL);
                        return [4 /*yield*/, this.getAccessToken({ code: code })];
                    case 1:
                        accessToken = _a.sent();
                        return [2 /*return*/, accessToken];
                    case 2: return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Get user access token via `code`
     *
     * @param options.code - The code from the query
     *
     * @return User access token
     *
     * @see https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#2-users-are-redirected-back-to-your-site-by-github
     */
    GithubV3.prototype.getAccessToken = function (_a) {
        var code = _a.code;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.post("https://cors-anywhere.herokuapp.com/" + concatURL(this.baseURL, 'login/oauth/access_token'), {
                            client_id: this.clientId,
                            client_secret: this.clientSecret,
                            code: code,
                        }, {
                            headers: {
                                'Accept': 'application/json',
                            },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.access_token];
                }
            });
        });
    };
    /**
     * Get the logined user with access token.
     *
     * @param options.accessToken - User access token
     *
     * @return The user
     *
     * @see https://developer.github.com/v3/users/#get-the-authenticated-user
     */
    GithubV3.prototype.getUser = function (_a) {
        var accessToken = _a.accessToken;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.get('user', {
                            headers: { 'Authorization': "token " + accessToken },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeUser(data)];
                }
            });
        });
    };
    /**
     * Get issue of this page according to the issue id or the issue title
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.issueTitle - The title of issue
     *
     * @return The raw response of issue
     *
     * @see https://developer.github.com/v3/issues/#list-issues-for-a-repository
     * @see https://developer.github.com/v3/issues/#get-a-single-issue
     * @see https://developer.github.com/v3/#pagination
     */
    GithubV3.prototype.getIssue = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, issueTitle = _a.issueTitle;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options, data, e_1, data, issue;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = {};
                        if (accessToken) {
                            options.headers = {
                                'Authorization': "token " + accessToken,
                            };
                        }
                        if (!issueId) return [3 /*break*/, 5];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        options.params = {
                            // to avoid caching
                            timestamp: Date.now(),
                        };
                        return [4 /*yield*/, this.$http.get("repos/" + this.owner + "/" + this.repo + "/issues/" + issueId, options)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeIssue(data)];
                    case 3:
                        e_1 = _b.sent();
                        if (e_1.response && e_1.response.status === 404) {
                            return [2 /*return*/, null];
                        }
                        else {
                            throw e_1;
                        }
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        options.params = {
                            labels: this.labels.join(','),
                            sort: 'created',
                            direction: 'asc',
                            // to avoid caching
                            timestamp: Date.now(),
                        };
                        return [4 /*yield*/, this.$http.get("repos/" + this.owner + "/" + this.repo + "/issues", options)];
                    case 6:
                        data = (_b.sent()).data;
                        issue = data.map(normalizeIssue).find(function (item) { return item.title === issueTitle; });
                        return [2 /*return*/, issue || null];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create a new issue
     *
     * @param options.accessToken - User access token
     * @param options.title - The title of issue
     * @param options.content - The content of issue
     *
     * @return The created issue
     *
     * @see https://developer.github.com/v3/issues/#create-an-issue
     */
    GithubV3.prototype.postIssue = function (_a) {
        var accessToken = _a.accessToken, title = _a.title, content = _a.content;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.post("repos/" + this.owner + "/" + this.repo + "/issues", {
                            title: title,
                            body: content,
                            labels: this.labels,
                        }, {
                            headers: { 'Authorization': "token " + accessToken },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeIssue(data)];
                }
            });
        });
    };
    /**
     * Get comments of this page according to the issue id or the issue title
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.query - The query parameters
     *
     * @return The comments
     *
     * @see https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue
     * @see https://developer.github.com/v3/#pagination
     *
     * @reamrks
     * Github V3 does not support sort for issue comments now.
     * Github V3 have to request the parent issue to get the count of comments.
     */
    GithubV3.prototype.getComments = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, _b = _a.query, _c = _b === void 0 ? {} : _b, _d = _c.page, page = _d === void 0 ? 1 : _d, _e = _c.perPage, perPage = _e === void 0 ? 10 : _e, _f = _c.sort, sort = _f === void 0 ? 'desc' : _f;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var issueOptions, commentsOptions, _g, issueRes, commentsRes, linkHeader, thisPage, thisPerPage;
            return tslib_1.__generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        issueOptions = {
                            params: {
                                // to avoid caching
                                timestamp: Date.now(),
                            },
                        };
                        commentsOptions = {
                            params: {
                                // pagination
                                'page': page,
                                'per_page': perPage,
                                /**
                                 * github v3 api does not support sort for issue comments
                                 * have sent feedback to github support
                                 */
                                // 'sort': 'created',
                                // 'direction': sort,
                                // to avoid caching
                                'timestamp': Date.now(),
                            },
                            headers: {
                                'Accept': [
                                    'application/vnd.github.v3.raw+json',
                                    'application/vnd.github.v3.html+json',
                                    'application/vnd.github.squirrel-girl-preview',
                                ],
                            },
                        };
                        if (accessToken) {
                            issueOptions.headers = {
                                'Authorization': "token " + accessToken,
                            };
                            commentsOptions.headers['Authorization'] = "token " + accessToken;
                        }
                        return [4 /*yield*/, Promise.all([
                                this.$http.get("repos/" + this.owner + "/" + this.repo + "/issues/" + issueId, issueOptions),
                                this.$http.get("repos/" + this.owner + "/" + this.repo + "/issues/" + issueId + "/comments", commentsOptions),
                            ])
                            // it's annoying that have to get the page and per_page from the `Link` header
                        ];
                    case 1:
                        _g = tslib_1.__read.apply(void 0, [_h.sent()
                            // it's annoying that have to get the page and per_page from the `Link` header
                            , 2]), issueRes = _g[0], commentsRes = _g[1];
                        linkHeader = commentsRes.headers['link'] || null;
                        thisPage = /rel="next"/.test(linkHeader)
                            ? Number(linkHeader.replace(/^.*[^_]page=(\d*).*rel="next".*$/, '$1')) - 1
                            : /rel="prev"/.test(linkHeader)
                                ? Number(linkHeader.replace(/^.*[^_]page=(\d*).*rel="prev".*$/, '$1')) + 1
                                : 1;
                        thisPerPage = linkHeader ? Number(linkHeader.replace(/^.*per_page=(\d*).*$/, '$1')) : perPage;
                        return [2 /*return*/, {
                                count: Number(issueRes.data.comments),
                                page: thisPage,
                                perPage: thisPerPage,
                                data: commentsRes.data.map(normalizeComment),
                            }];
                }
            });
        });
    };
    /**
     * Create a new comment
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.content - The content of comment
     *
     * @return The created comment
     *
     * @see https://developer.github.com/v3/issues/comments/#create-a-comment
     */
    GithubV3.prototype.postComment = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, content = _a.content;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.post("repos/" + this.owner + "/" + this.repo + "/issues/" + issueId + "/comments", {
                            body: content,
                        }, {
                            headers: {
                                'Authorization': "token " + accessToken,
                                'Accept': [
                                    'application/vnd.github.v3.raw+json',
                                    'application/vnd.github.v3.html+json',
                                    'application/vnd.github.squirrel-girl-preview',
                                ],
                            },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeComment(data)];
                }
            });
        });
    };
    /**
     * Edit a comment
     *
     * @param options.accessToken - User access token
     * @param options.commentId - The id of comment
     * @param options.content - The content of comment
     *
     * @return The edited comment
     *
     * @see https://developer.github.com/v3/issues/comments/#edit-a-comment
     */
    GithubV3.prototype.putComment = function (_a) {
        var accessToken = _a.accessToken, commentId = _a.commentId, content = _a.content;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.patch("repos/" + this.owner + "/" + this.repo + "/issues/comments/" + commentId, {
                            body: content,
                        }, {
                            headers: {
                                'Authorization': "token " + accessToken,
                                'Accept': [
                                    'application/vnd.github.v3.raw+json',
                                    'application/vnd.github.v3.html+json',
                                    'application/vnd.github.squirrel-girl-preview',
                                ],
                            },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeComment(data)];
                }
            });
        });
    };
    /**
     * Delete a comment
     *
     * @param options.accessToken - User access token
     * @param options.commentId - The id of comment
     *
     * @return `true` if succeed, `false` if failed
     *
     * @see https://developer.github.com/v3/issues/comments/#delete-a-comment
     */
    GithubV3.prototype.deleteComment = function (_a) {
        var accessToken = _a.accessToken, commentId = _a.commentId;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var status;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.delete("repos/" + this.owner + "/" + this.repo + "/issues/comments/" + commentId, {
                            headers: { 'Authorization': "token " + accessToken },
                        })];
                    case 1:
                        status = (_b.sent()).status;
                        return [2 /*return*/, status === 204];
                }
            });
        });
    };
    /**
     * Get reactions of a comment
     *
     * @param options.accessToken - User access token
     * @param options.commentId - The id of comment
     *
     * @return The comments
     *
     * @see https://developer.github.com/v3/issues/comments/#get-a-single-comment
     * @see https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment
     *
     * @remarks
     * The `List reactions for an issue comment` API also returns author of each reaction.
     * As we only need the count, use the `Get a single comment` API is much simpler.
     */
    GithubV3.prototype.getCommentReactions = function (_a) {
        var accessToken = _a.accessToken, commentId = _a.commentId;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.get("repos/" + this.owner + "/" + this.repo + "/issues/comments/" + commentId, {
                            headers: {
                                'Authorization': "token " + accessToken,
                                'Accept': 'application/vnd.github.squirrel-girl-preview',
                            },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeReactions(data.reactions)];
                }
            });
        });
    };
    /**
     * Create a new reaction of a comment
     *
     * @param options.accessToken - User access token
     * @param options.commentId - The id of comment
     * @param options.reaction - The reaction
     *
     * @return `true` if succeed, `false` if already token
     *
     * @see https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
     */
    GithubV3.prototype.postCommentReaction = function (_a) {
        var accessToken = _a.accessToken, commentId = _a.commentId, reaction = _a.reaction;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.post("repos/" + this.owner + "/" + this.repo + "/issues/comments/" + commentId + "/reactions", {
                            content: mapReactionName(reaction),
                        }, {
                            headers: {
                                'Authorization': "token " + accessToken,
                                'Accept': 'application/vnd.github.squirrel-girl-preview',
                            },
                        })];
                    case 1:
                        response = _b.sent();
                        return [2 /*return*/, response.status === 201];
                }
            });
        });
    };
    return GithubV3;
}());
export default GithubV3;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sS0FHTixNQUFNLE9BQU8sQ0FBQTtBQUVkLE9BQU8sRUFDTCxRQUFRLEVBQ1IsU0FBUyxFQUNULFdBQVcsRUFDWCxVQUFVLEdBQ1gsTUFBTSxjQUFjLENBQUE7QUFFckIsT0FBTyxFQUNMLGFBQWEsRUFDYixjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLGtCQUFrQixFQUNsQixlQUFlLEdBQ2hCLE1BQU0sU0FBUyxDQUFBO0FBRWhCOzs7OztHQUtHO0FBQ0g7SUFVRSxrQkFBYSxFQVFNO1lBUGpCLGVBQThCLEVBQTlCLG1EQUE4QixFQUM5QixnQkFBSyxFQUNMLGNBQUksRUFDSixrQkFBTSxFQUNOLHNCQUFRLEVBQ1IsOEJBQVksRUFDWixnQkFBSztRQUVMLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBRXBCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFBO1FBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBRWxCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUN4QixPQUFPLEVBQUUsT0FBTyxLQUFLLG9CQUFvQixDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7WUFDbkcsT0FBTyxFQUFFO2dCQUNQLFFBQVEsRUFBRSxnQ0FBZ0M7YUFDM0M7U0FDRixDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsS0FBSyxDQUFDLFlB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RCxDQUFDLEFBMWVELElBMGVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVnNzdWVBUEkgfSBmcm9tICcuLi8uLi8uLi92c3N1ZS90eXBlcydcblxuaW1wb3J0IGF4aW9zLCB7XG4gIEF4aW9zSW5zdGFuY2UsXG4gIEF4aW9zUmVxdWVzdENvbmZpZyxcbn0gZnJvbSAnYXhpb3MnXG5cbmltcG9ydCB7XG4gIGJ1aWxkVVJMLFxuICBjb25jYXRVUkwsXG4gIGdldENsZWFuVVJMLFxuICBwYXJzZVF1ZXJ5LFxufSBmcm9tICdAdnNzdWUvdXRpbHMnXG5cbmltcG9ydCB7XG4gIG5vcm1hbGl6ZVVzZXIsXG4gIG5vcm1hbGl6ZUlzc3VlLFxuICBub3JtYWxpemVDb21tZW50LFxuICBub3JtYWxpemVSZWFjdGlvbnMsXG4gIG1hcFJlYWN0aW9uTmFtZSxcbn0gZnJvbSAnLi91dGlscydcblxuLyoqXG4gKiBHaXRodWIgUkVTVCBBUEkgdjNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vYXBwcy9idWlsZGluZy1vYXV0aC1hcHBzL1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHaXRodWJWMyBpbXBsZW1lbnRzIFZzc3VlQVBJLkluc3RhbmNlIHtcbiAgYmFzZVVSTDogc3RyaW5nXG4gIG93bmVyOiBzdHJpbmdcbiAgcmVwbzogc3RyaW5nXG4gIGxhYmVsczogQXJyYXk8c3RyaW5nPlxuICBjbGllbnRJZDogc3RyaW5nXG4gIGNsaWVudFNlY3JldDogc3RyaW5nXG4gIHN0YXRlOiBzdHJpbmdcbiAgJGh0dHA6IEF4aW9zSW5zdGFuY2VcblxuICBjb25zdHJ1Y3RvciAoe1xuICAgIGJhc2VVUkwgPSAnaHR0cHM6Ly9naXRodWIuY29tJyxcbiAgICBvd25lcixcbiAgICByZXBvLFxuICAgIGxhYmVscyxcbiAgICBjbGllbnRJZCxcbiAgICBjbGllbnRTZWNyZXQsXG4gICAgc3RhdGUsXG4gIH06IFZzc3VlQVBJLk9wdGlvbnMpIHtcbiAgICB0aGlzLmJhc2VVUkwgPSBiYXNlVVJMXG4gICAgdGhpcy5vd25lciA9IG93bmVyXG4gICAgdGhpcy5yZXBvID0gcmVwb1xuICAgIHRoaXMubGFiZWxzID0gbGFiZWxzXG5cbiAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWRcbiAgICB0aGlzLmNsaWVudFNlY3JldCA9IGNsaWVudFNlY3JldFxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZVxuXG4gICAgdGhpcy4kaHR0cCA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgICBiYXNlVVJMOiBiYXNlVVJMID09PSAnaHR0cHM6Ly9naXRodWIuY29tJyA/ICdodHRwczovL2FwaS5naXRodWIuY29tJyA6IGNvbmNhdFVSTChiYXNlVVJMLCAnYXBpL3YzJyksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52Mytqc29uJyxcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIHRoaXMuJGh0dHAuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXNwb25zZS5kYXRhLmVycm9yX2Rlc2NyaXB0aW9uKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgcGxhdGZvcm0gYXBpIGluZm9cbiAgICovXG4gIGdldCBwbGF0Zm9ybSAoKTogVnNzdWVBUEkuUGxhdGZvcm0ge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAnR2l0SHViJyxcbiAgICAgIGxpbms6IHRoaXMuYmFzZVVSTCxcbiAgICAgIHZlcnNpb246ICd2MycsXG4gICAgICBtZXRhOiB7XG4gICAgICAgIHJlYWN0YWJsZTogdHJ1ZSxcbiAgICAgICAgc29ydGFibGU6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVkaXJlY3QgdG8gdGhlIGF1dGhvcml6YXRpb24gcGFnZSBvZiBwbGF0Zm9ybS5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL2FwcHMvYnVpbGRpbmctb2F1dGgtYXBwcy9hdXRob3JpemluZy1vYXV0aC1hcHBzLyMxLXJlcXVlc3QtYS11c2Vycy1naXRodWItaWRlbnRpdHlcbiAgICovXG4gIHJlZGlyZWN0QXV0aCAoKTogdm9pZCB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBidWlsZFVSTChjb25jYXRVUkwodGhpcy5iYXNlVVJMLCAnbG9naW4vb2F1dGgvYXV0aG9yaXplJyksIHtcbiAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRJZCxcbiAgICAgIHJlZGlyZWN0X3VyaTogd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgICBzY29wZTogJ3B1YmxpY19yZXBvJyxcbiAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGF1dGhvcml6YXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4gQSBzdHJpbmcgZm9yIGFjY2VzcyB0b2tlbiwgYG51bGxgIGZvciBubyBhdXRob3JpemF0aW9uIGNvZGVcbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL2FwcHMvYnVpbGRpbmctb2F1dGgtYXBwcy9hdXRob3JpemluZy1vYXV0aC1hcHBzL1xuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBJZiB0aGUgYGNvZGVgIGFuZCBgc3RhdGVgIGV4aXN0IGluIHRoZSBxdWVyeSwgYW5kIHRoZSBgc3RhdGVgIG1hdGNoZXMsIHJlbW92ZSB0aGVtIGZyb20gcXVlcnksIGFuZCB0cnkgdG8gZ2V0IHRoZSBhY2Nlc3MgdG9rZW4uXG4gICAqL1xuICBhc3luYyBoYW5kbGVBdXRoICgpOiBQcm9taXNlPFZzc3VlQVBJLkFjY2Vzc1Rva2VuPiB7XG4gICAgY29uc3QgcXVlcnkgPSBwYXJzZVF1ZXJ5KHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpXG4gICAgaWYgKHF1ZXJ5LmNvZGUpIHtcbiAgICAgIGlmIChxdWVyeS5zdGF0ZSAhPT0gdGhpcy5zdGF0ZSkge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgICAgY29uc3QgY29kZSA9IHF1ZXJ5LmNvZGVcbiAgICAgIGRlbGV0ZSBxdWVyeS5jb2RlXG4gICAgICBkZWxldGUgcXVlcnkuc3RhdGVcbiAgICAgIGNvbnN0IHJlcGxhY2VVUkwgPSBidWlsZFVSTChnZXRDbGVhblVSTCh3aW5kb3cubG9jYXRpb24uaHJlZiksIHF1ZXJ5KSArIHdpbmRvdy5sb2NhdGlvbi5oYXNoXG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgJycsIHJlcGxhY2VVUkwpXG4gICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMuZ2V0QWNjZXNzVG9rZW4oeyBjb2RlIH0pXG4gICAgICByZXR1cm4gYWNjZXNzVG9rZW5cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdXNlciBhY2Nlc3MgdG9rZW4gdmlhIGBjb2RlYFxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucy5jb2RlIC0gVGhlIGNvZGUgZnJvbSB0aGUgcXVlcnlcbiAgICpcbiAgICogQHJldHVybiBVc2VyIGFjY2VzcyB0b2tlblxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vYXBwcy9idWlsZGluZy1vYXV0aC1hcHBzL2F1dGhvcml6aW5nLW9hdXRoLWFwcHMvIzItdXNlcnMtYXJlLXJlZGlyZWN0ZWQtYmFjay10by15b3VyLXNpdGUtYnktZ2l0aHViXG4gICAqL1xuICBhc3luYyBnZXRBY2Nlc3NUb2tlbiAoe1xuICAgIGNvZGUsXG4gIH06IHtcbiAgICBjb2RlOiBzdHJpbmdcbiAgfSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgLyoqXG4gICAgICogYWNjZXNzX3Rva2VuIGFwaSBkb2VzIG5vdCBzdXBwb3J0IGNvcnNcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3MvZ2l0aHViL2lzc3Vlcy8zMzBcbiAgICAgKi9cbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuJGh0dHAucG9zdChgaHR0cHM6Ly9jb3JzLWFueXdoZXJlLmhlcm9rdWFwcC5jb20vJHtjb25jYXRVUkwodGhpcy5iYXNlVVJMLCAnbG9naW4vb2F1dGgvYWNjZXNzX3Rva2VuJyl9YCwge1xuICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudElkLFxuICAgICAgY2xpZW50X3NlY3JldDogdGhpcy5jbGllbnRTZWNyZXQsXG4gICAgICBjb2RlLFxuICAgICAgLyoqXG4gICAgICAgKiB1c2VsZXNzIGJ1dCBtZW50aW9uZWQgaW4gZG9jc1xuICAgICAgICovXG4gICAgICAvLyByZWRpcmVjdF91cmk6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgLy8gc3RhdGU6IHRoaXMuc3RhdGUsXG4gICAgfSwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICB9KVxuICAgIHJldHVybiBkYXRhLmFjY2Vzc190b2tlblxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbG9naW5lZCB1c2VyIHdpdGggYWNjZXNzIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucy5hY2Nlc3NUb2tlbiAtIFVzZXIgYWNjZXNzIHRva2VuXG4gICAqXG4gICAqIEByZXR1cm4gVGhlIHVzZXJcbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3VzZXJzLyNnZXQtdGhlLWF1dGhlbnRpY2F0ZWQtdXNlclxuICAgKi9cbiAgYXN5bmMgZ2V0VXNlciAoe1xuICAgIGFjY2Vzc1Rva2VuLFxuICB9OiB7XG4gICAgYWNjZXNzVG9rZW46IFZzc3VlQVBJLkFjY2Vzc1Rva2VuXG4gIH0pOiBQcm9taXNlPFZzc3VlQVBJLlVzZXI+IHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuJGh0dHAuZ2V0KCd1c2VyJywge1xuICAgICAgaGVhZGVyczogeyAnQXV0aG9yaXphdGlvbic6IGB0b2tlbiAke2FjY2Vzc1Rva2VufWAgfSxcbiAgICB9KVxuICAgIHJldHVybiBub3JtYWxpemVVc2VyKGRhdGEpXG4gIH1cblxuICAvKipcbiAgICogR2V0IGlzc3VlIG9mIHRoaXMgcGFnZSBhY2NvcmRpbmcgdG8gdGhlIGlzc3VlIGlkIG9yIHRoZSBpc3N1ZSB0aXRsZVxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucy5hY2Nlc3NUb2tlbiAtIFVzZXIgYWNjZXNzIHRva2VuXG4gICAqIEBwYXJhbSBvcHRpb25zLmlzc3VlSWQgLSBUaGUgaWQgb2YgaXNzdWVcbiAgICogQHBhcmFtIG9wdGlvbnMuaXNzdWVUaXRsZSAtIFRoZSB0aXRsZSBvZiBpc3N1ZVxuICAgKlxuICAgKiBAcmV0dXJuIFRoZSByYXcgcmVzcG9uc2Ugb2YgaXNzdWVcbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2lzc3Vlcy8jbGlzdC1pc3N1ZXMtZm9yLWEtcmVwb3NpdG9yeVxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzLyNnZXQtYS1zaW5nbGUtaXNzdWVcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzLyNwYWdpbmF0aW9uXG4gICAqL1xuICBhc3luYyBnZXRJc3N1ZSAoe1xuICAgIGFjY2Vzc1Rva2VuLFxuICAgIGlzc3VlSWQsXG4gICAgaXNzdWVUaXRsZSxcbiAgfToge1xuICAgIGFjY2Vzc1Rva2VuOiBWc3N1ZUFQSS5BY2Nlc3NUb2tlblxuICAgIGlzc3VlSWQ/OiBzdHJpbmcgfCBudW1iZXJcbiAgICBpc3N1ZVRpdGxlPzogc3RyaW5nXG4gIH0pOiBQcm9taXNlPFZzc3VlQVBJLklzc3VlIHwgbnVsbD4ge1xuICAgIGNvbnN0IG9wdGlvbnM6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHt9XG5cbiAgICBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgdG9rZW4gJHthY2Nlc3NUb2tlbn1gLFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc3N1ZUlkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBvcHRpb25zLnBhcmFtcyA9IHtcbiAgICAgICAgICAvLyB0byBhdm9pZCBjYWNoaW5nXG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy4kaHR0cC5nZXQoYHJlcG9zLyR7dGhpcy5vd25lcn0vJHt0aGlzLnJlcG99L2lzc3Vlcy8ke2lzc3VlSWR9YCwgb3B0aW9ucylcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZUlzc3VlKGRhdGEpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLnJlc3BvbnNlICYmIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLnBhcmFtcyA9IHtcbiAgICAgICAgbGFiZWxzOiB0aGlzLmxhYmVscy5qb2luKCcsJyksXG4gICAgICAgIHNvcnQ6ICdjcmVhdGVkJyxcbiAgICAgICAgZGlyZWN0aW9uOiAnYXNjJyxcbiAgICAgICAgLy8gdG8gYXZvaWQgY2FjaGluZ1xuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICB9XG4gICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuJGh0dHAuZ2V0KGByZXBvcy8ke3RoaXMub3duZXJ9LyR7dGhpcy5yZXBvfS9pc3N1ZXNgLCBvcHRpb25zKVxuICAgICAgY29uc3QgaXNzdWUgPSBkYXRhLm1hcChub3JtYWxpemVJc3N1ZSkuZmluZChpdGVtID0+IGl0ZW0udGl0bGUgPT09IGlzc3VlVGl0bGUpXG4gICAgICByZXR1cm4gaXNzdWUgfHwgbnVsbFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaXNzdWVcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMuYWNjZXNzVG9rZW4gLSBVc2VyIGFjY2VzcyB0b2tlblxuICAgKiBAcGFyYW0gb3B0aW9ucy50aXRsZSAtIFRoZSB0aXRsZSBvZiBpc3N1ZVxuICAgKiBAcGFyYW0gb3B0aW9ucy5jb250ZW50IC0gVGhlIGNvbnRlbnQgb2YgaXNzdWVcbiAgICpcbiAgICogQHJldHVybiBUaGUgY3JlYXRlZCBpc3N1ZVxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzLyNjcmVhdGUtYW4taXNzdWVcbiAgICovXG4gIGFzeW5jIHBvc3RJc3N1ZSAoe1xuICAgIGFjY2Vzc1Rva2VuLFxuICAgIHRpdGxlLFxuICAgIGNvbnRlbnQsXG4gIH06IHtcbiAgICBhY2Nlc3NUb2tlbjogVnNzdWVBUEkuQWNjZXNzVG9rZW5cbiAgICB0aXRsZTogc3RyaW5nXG4gICAgY29udGVudDogc3RyaW5nXG4gIH0pOiBQcm9taXNlPFZzc3VlQVBJLklzc3VlPiB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLiRodHRwLnBvc3QoYHJlcG9zLyR7dGhpcy5vd25lcn0vJHt0aGlzLnJlcG99L2lzc3Vlc2AsIHtcbiAgICAgIHRpdGxlLFxuICAgICAgYm9keTogY29udGVudCxcbiAgICAgIGxhYmVsczogdGhpcy5sYWJlbHMsXG4gICAgfSwge1xuICAgICAgaGVhZGVyczogeyAnQXV0aG9yaXphdGlvbic6IGB0b2tlbiAke2FjY2Vzc1Rva2VufWAgfSxcbiAgICB9KVxuICAgIHJldHVybiBub3JtYWxpemVJc3N1ZShkYXRhKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb21tZW50cyBvZiB0aGlzIHBhZ2UgYWNjb3JkaW5nIHRvIHRoZSBpc3N1ZSBpZCBvciB0aGUgaXNzdWUgdGl0bGVcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMuYWNjZXNzVG9rZW4gLSBVc2VyIGFjY2VzcyB0b2tlblxuICAgKiBAcGFyYW0gb3B0aW9ucy5pc3N1ZUlkIC0gVGhlIGlkIG9mIGlzc3VlXG4gICAqIEBwYXJhbSBvcHRpb25zLnF1ZXJ5IC0gVGhlIHF1ZXJ5IHBhcmFtZXRlcnNcbiAgICpcbiAgICogQHJldHVybiBUaGUgY29tbWVudHNcbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL2lzc3Vlcy9jb21tZW50cy8jbGlzdC1jb21tZW50cy1vbi1hbi1pc3N1ZVxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvI3BhZ2luYXRpb25cbiAgICpcbiAgICogQHJlYW1ya3NcbiAgICogR2l0aHViIFYzIGRvZXMgbm90IHN1cHBvcnQgc29ydCBmb3IgaXNzdWUgY29tbWVudHMgbm93LlxuICAgKiBHaXRodWIgVjMgaGF2ZSB0byByZXF1ZXN0IHRoZSBwYXJlbnQgaXNzdWUgdG8gZ2V0IHRoZSBjb3VudCBvZiBjb21tZW50cy5cbiAgICovXG4gIGFzeW5jIGdldENvbW1lbnRzICh7XG4gICAgYWNjZXNzVG9rZW4sXG4gICAgaXNzdWVJZCxcbiAgICBxdWVyeToge1xuICAgICAgcGFnZSA9IDEsXG4gICAgICBwZXJQYWdlID0gMTAsXG4gICAgICBzb3J0ID0gJ2Rlc2MnLFxuICAgIH0gPSB7fSxcbiAgfToge1xuICAgIGFjY2Vzc1Rva2VuOiBWc3N1ZUFQSS5BY2Nlc3NUb2tlblxuICAgIGlzc3VlSWQ6IHN0cmluZyB8IG51bWJlclxuICAgIHF1ZXJ5PzogUGFydGlhbDxWc3N1ZUFQSS5RdWVyeT5cbiAgfSk6IFByb21pc2U8VnNzdWVBUEkuQ29tbWVudHM+IHtcbiAgICBjb25zdCBpc3N1ZU9wdGlvbnM6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIHBhcmFtczoge1xuICAgICAgICAvLyB0byBhdm9pZCBjYWNoaW5nXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIH0sXG4gICAgfVxuICAgIGNvbnN0IGNvbW1lbnRzT3B0aW9uczogQXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIC8vIHBhZ2luYXRpb25cbiAgICAgICAgJ3BhZ2UnOiBwYWdlLFxuICAgICAgICAncGVyX3BhZ2UnOiBwZXJQYWdlLFxuICAgICAgICAvKipcbiAgICAgICAgICogZ2l0aHViIHYzIGFwaSBkb2VzIG5vdCBzdXBwb3J0IHNvcnQgZm9yIGlzc3VlIGNvbW1lbnRzXG4gICAgICAgICAqIGhhdmUgc2VudCBmZWVkYmFjayB0byBnaXRodWIgc3VwcG9ydFxuICAgICAgICAgKi9cbiAgICAgICAgLy8gJ3NvcnQnOiAnY3JlYXRlZCcsXG4gICAgICAgIC8vICdkaXJlY3Rpb24nOiBzb3J0LFxuICAgICAgICAvLyB0byBhdm9pZCBjYWNoaW5nXG4gICAgICAgICd0aW1lc3RhbXAnOiBEYXRlLm5vdygpLFxuICAgICAgfSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0FjY2VwdCc6IFtcbiAgICAgICAgICAnYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52My5yYXcranNvbicsXG4gICAgICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMuaHRtbCtqc29uJyxcbiAgICAgICAgICAnYXBwbGljYXRpb24vdm5kLmdpdGh1Yi5zcXVpcnJlbC1naXJsLXByZXZpZXcnLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9XG4gICAgaWYgKGFjY2Vzc1Rva2VuKSB7XG4gICAgICBpc3N1ZU9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgdG9rZW4gJHthY2Nlc3NUb2tlbn1gLFxuICAgICAgfVxuICAgICAgY29tbWVudHNPcHRpb25zLmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9IGB0b2tlbiAke2FjY2Vzc1Rva2VufWBcbiAgICB9XG5cbiAgICAvLyBnaXRodWIgdjMgaGF2ZSB0byBnZXQgdGhlIHRvdGFsIGNvdW50IG9mIGNvbW1lbnRzIGJ5IHJlcXVlc3RpbmcgdGhlIGlzc3VlXG4gICAgY29uc3QgW2lzc3VlUmVzLCBjb21tZW50c1Jlc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLiRodHRwLmdldChgcmVwb3MvJHt0aGlzLm93bmVyfS8ke3RoaXMucmVwb30vaXNzdWVzLyR7aXNzdWVJZH1gLCBpc3N1ZU9wdGlvbnMpLFxuICAgICAgdGhpcy4kaHR0cC5nZXQoYHJlcG9zLyR7dGhpcy5vd25lcn0vJHt0aGlzLnJlcG99L2lzc3Vlcy8ke2lzc3VlSWR9L2NvbW1lbnRzYCwgY29tbWVudHNPcHRpb25zKSxcbiAgICBdKVxuXG4gICAgLy8gaXQncyBhbm5veWluZyB0aGF0IGhhdmUgdG8gZ2V0IHRoZSBwYWdlIGFuZCBwZXJfcGFnZSBmcm9tIHRoZSBgTGlua2AgaGVhZGVyXG4gICAgY29uc3QgbGlua0hlYWRlciA9IGNvbW1lbnRzUmVzLmhlYWRlcnNbJ2xpbmsnXSB8fCBudWxsXG5cbiAgICBjb25zdCB0aGlzUGFnZSA9IC9yZWw9XCJuZXh0XCIvLnRlc3QobGlua0hlYWRlcilcbiAgICAgID8gTnVtYmVyKGxpbmtIZWFkZXIucmVwbGFjZSgvXi4qW15fXXBhZ2U9KFxcZCopLipyZWw9XCJuZXh0XCIuKiQvLCAnJDEnKSkgLSAxXG4gICAgICA6IC9yZWw9XCJwcmV2XCIvLnRlc3QobGlua0hlYWRlcilcbiAgICAgICAgPyBOdW1iZXIobGlua0hlYWRlci5yZXBsYWNlKC9eLipbXl9dcGFnZT0oXFxkKikuKnJlbD1cInByZXZcIi4qJC8sICckMScpKSArIDFcbiAgICAgICAgOiAxXG5cbiAgICBjb25zdCB0aGlzUGVyUGFnZSA9IGxpbmtIZWFkZXIgPyBOdW1iZXIobGlua0hlYWRlci5yZXBsYWNlKC9eLipwZXJfcGFnZT0oXFxkKikuKiQvLCAnJDEnKSkgOiBwZXJQYWdlXG5cbiAgICByZXR1cm4ge1xuICAgICAgY291bnQ6IE51bWJlcihpc3N1ZVJlcy5kYXRhLmNvbW1lbnRzKSxcbiAgICAgIHBhZ2U6IHRoaXNQYWdlLFxuICAgICAgcGVyUGFnZTogdGhpc1BlclBhZ2UsXG4gICAgICBkYXRhOiBjb21tZW50c1Jlcy5kYXRhLm1hcChub3JtYWxpemVDb21tZW50KSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGNvbW1lbnRcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMuYWNjZXNzVG9rZW4gLSBVc2VyIGFjY2VzcyB0b2tlblxuICAgKiBAcGFyYW0gb3B0aW9ucy5pc3N1ZUlkIC0gVGhlIGlkIG9mIGlzc3VlXG4gICAqIEBwYXJhbSBvcHRpb25zLmNvbnRlbnQgLSBUaGUgY29udGVudCBvZiBjb21tZW50XG4gICAqXG4gICAqIEByZXR1cm4gVGhlIGNyZWF0ZWQgY29tbWVudFxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2NvbW1lbnRzLyNjcmVhdGUtYS1jb21tZW50XG4gICAqL1xuICBhc3luYyBwb3N0Q29tbWVudCAoe1xuICAgIGFjY2Vzc1Rva2VuLFxuICAgIGlzc3VlSWQsXG4gICAgY29udGVudCxcbiAgfToge1xuICAgIGFjY2Vzc1Rva2VuOiBWc3N1ZUFQSS5BY2Nlc3NUb2tlblxuICAgIGlzc3VlSWQ6IHN0cmluZyB8IG51bWJlclxuICAgIGNvbnRlbnQ6IHN0cmluZ1xuICB9KTogUHJvbWlzZTxWc3N1ZUFQSS5Db21tZW50PiB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLiRodHRwLnBvc3QoYHJlcG9zLyR7dGhpcy5vd25lcn0vJHt0aGlzLnJlcG99L2lzc3Vlcy8ke2lzc3VlSWR9L2NvbW1lbnRzYCwge1xuICAgICAgYm9keTogY29udGVudCxcbiAgICB9LCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYHRva2VuICR7YWNjZXNzVG9rZW59YCxcbiAgICAgICAgJ0FjY2VwdCc6IFtcbiAgICAgICAgICAnYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52My5yYXcranNvbicsXG4gICAgICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMuaHRtbCtqc29uJyxcbiAgICAgICAgICAnYXBwbGljYXRpb24vdm5kLmdpdGh1Yi5zcXVpcnJlbC1naXJsLXByZXZpZXcnLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9KVxuICAgIHJldHVybiBub3JtYWxpemVDb21tZW50KGRhdGEpXG4gIH1cblxuICAvKipcbiAgICogRWRpdCBhIGNvbW1lbnRcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMuYWNjZXNzVG9rZW4gLSBVc2VyIGFjY2VzcyB0b2tlblxuICAgKiBAcGFyYW0gb3B0aW9ucy5jb21tZW50SWQgLSBUaGUgaWQgb2YgY29tbWVudFxuICAgKiBAcGFyYW0gb3B0aW9ucy5jb250ZW50IC0gVGhlIGNvbnRlbnQgb2YgY29tbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIFRoZSBlZGl0ZWQgY29tbWVudFxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2NvbW1lbnRzLyNlZGl0LWEtY29tbWVudFxuICAgKi9cbiAgYXN5bmMgcHV0Q29tbWVudCAoe1xuICAgIGFjY2Vzc1Rva2VuLFxuICAgIGNvbW1lbnRJZCxcbiAgICBjb250ZW50LFxuICB9OiB7XG4gICAgYWNjZXNzVG9rZW46IFZzc3VlQVBJLkFjY2Vzc1Rva2VuXG4gICAgaXNzdWVJZDogc3RyaW5nIHwgbnVtYmVyXG4gICAgY29tbWVudElkOiBzdHJpbmcgfCBudW1iZXJcbiAgICBjb250ZW50OiBzdHJpbmdcbiAgfSk6IFByb21pc2U8VnNzdWVBUEkuQ29tbWVudD4ge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy4kaHR0cC5wYXRjaChgcmVwb3MvJHt0aGlzLm93bmVyfS8ke3RoaXMucmVwb30vaXNzdWVzL2NvbW1lbnRzLyR7Y29tbWVudElkfWAsIHtcbiAgICAgIGJvZHk6IGNvbnRlbnQsXG4gICAgfSwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGB0b2tlbiAke2FjY2Vzc1Rva2VufWAsXG4gICAgICAgICdBY2NlcHQnOiBbXG4gICAgICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIudjMucmF3K2pzb24nLFxuICAgICAgICAgICdhcHBsaWNhdGlvbi92bmQuZ2l0aHViLnYzLmh0bWwranNvbicsXG4gICAgICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIuc3F1aXJyZWwtZ2lybC1wcmV2aWV3JyxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgfSlcbiAgICByZXR1cm4gbm9ybWFsaXplQ29tbWVudChkYXRhKVxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIGNvbW1lbnRcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMuYWNjZXNzVG9rZW4gLSBVc2VyIGFjY2VzcyB0b2tlblxuICAgKiBAcGFyYW0gb3B0aW9ucy5jb21tZW50SWQgLSBUaGUgaWQgb2YgY29tbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIGB0cnVlYCBpZiBzdWNjZWVkLCBgZmFsc2VgIGlmIGZhaWxlZFxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmdpdGh1Yi5jb20vdjMvaXNzdWVzL2NvbW1lbnRzLyNkZWxldGUtYS1jb21tZW50XG4gICAqL1xuICBhc3luYyBkZWxldGVDb21tZW50ICh7XG4gICAgYWNjZXNzVG9rZW4sXG4gICAgY29tbWVudElkLFxuICB9OiB7XG4gICAgYWNjZXNzVG9rZW46IFZzc3VlQVBJLkFjY2Vzc1Rva2VuXG4gICAgaXNzdWVJZDogc3RyaW5nIHwgbnVtYmVyXG4gICAgY29tbWVudElkOiBzdHJpbmcgfCBudW1iZXJcbiAgfSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHsgc3RhdHVzIH0gPSBhd2FpdCB0aGlzLiRodHRwLmRlbGV0ZShgcmVwb3MvJHt0aGlzLm93bmVyfS8ke3RoaXMucmVwb30vaXNzdWVzL2NvbW1lbnRzLyR7Y29tbWVudElkfWAsIHtcbiAgICAgIGhlYWRlcnM6IHsgJ0F1dGhvcml6YXRpb24nOiBgdG9rZW4gJHthY2Nlc3NUb2tlbn1gIH0sXG4gICAgfSlcbiAgICByZXR1cm4gc3RhdHVzID09PSAyMDRcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmVhY3Rpb25zIG9mIGEgY29tbWVudFxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucy5hY2Nlc3NUb2tlbiAtIFVzZXIgYWNjZXNzIHRva2VuXG4gICAqIEBwYXJhbSBvcHRpb25zLmNvbW1lbnRJZCAtIFRoZSBpZCBvZiBjb21tZW50XG4gICAqXG4gICAqIEByZXR1cm4gVGhlIGNvbW1lbnRzXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9pc3N1ZXMvY29tbWVudHMvI2dldC1hLXNpbmdsZS1jb21tZW50XG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZWFjdGlvbnMvI2xpc3QtcmVhY3Rpb25zLWZvci1hbi1pc3N1ZS1jb21tZW50XG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIFRoZSBgTGlzdCByZWFjdGlvbnMgZm9yIGFuIGlzc3VlIGNvbW1lbnRgIEFQSSBhbHNvIHJldHVybnMgYXV0aG9yIG9mIGVhY2ggcmVhY3Rpb24uXG4gICAqIEFzIHdlIG9ubHkgbmVlZCB0aGUgY291bnQsIHVzZSB0aGUgYEdldCBhIHNpbmdsZSBjb21tZW50YCBBUEkgaXMgbXVjaCBzaW1wbGVyLlxuICAgKi9cbiAgYXN5bmMgZ2V0Q29tbWVudFJlYWN0aW9ucyAoe1xuICAgIGFjY2Vzc1Rva2VuLFxuICAgIGNvbW1lbnRJZCxcbiAgfToge1xuICAgIGFjY2Vzc1Rva2VuOiBWc3N1ZUFQSS5BY2Nlc3NUb2tlblxuICAgIGlzc3VlSWQ6IHN0cmluZyB8IG51bWJlclxuICAgIGNvbW1lbnRJZDogc3RyaW5nIHwgbnVtYmVyXG4gIH0pOiBQcm9taXNlPFZzc3VlQVBJLlJlYWN0aW9ucz4ge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy4kaHR0cC5nZXQoYHJlcG9zLyR7dGhpcy5vd25lcn0vJHt0aGlzLnJlcG99L2lzc3Vlcy9jb21tZW50cy8ke2NvbW1lbnRJZH1gLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYHRva2VuICR7YWNjZXNzVG9rZW59YCxcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi92bmQuZ2l0aHViLnNxdWlycmVsLWdpcmwtcHJldmlldycsXG4gICAgICB9LFxuICAgIH0pXG4gICAgcmV0dXJuIG5vcm1hbGl6ZVJlYWN0aW9ucyhkYXRhLnJlYWN0aW9ucylcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcmVhY3Rpb24gb2YgYSBjb21tZW50XG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zLmFjY2Vzc1Rva2VuIC0gVXNlciBhY2Nlc3MgdG9rZW5cbiAgICogQHBhcmFtIG9wdGlvbnMuY29tbWVudElkIC0gVGhlIGlkIG9mIGNvbW1lbnRcbiAgICogQHBhcmFtIG9wdGlvbnMucmVhY3Rpb24gLSBUaGUgcmVhY3Rpb25cbiAgICpcbiAgICogQHJldHVybiBgdHJ1ZWAgaWYgc3VjY2VlZCwgYGZhbHNlYCBpZiBhbHJlYWR5IHRva2VuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuZ2l0aHViLmNvbS92My9yZWFjdGlvbnMvI2NyZWF0ZS1yZWFjdGlvbi1mb3ItYW4taXNzdWUtY29tbWVudFxuICAgKi9cbiAgYXN5bmMgcG9zdENvbW1lbnRSZWFjdGlvbiAoe1xuICAgIGFjY2Vzc1Rva2VuLFxuICAgIGNvbW1lbnRJZCxcbiAgICByZWFjdGlvbixcbiAgfToge1xuICAgIGFjY2Vzc1Rva2VuOiBWc3N1ZUFQSS5BY2Nlc3NUb2tlblxuICAgIGlzc3VlSWQ6IHN0cmluZyB8IG51bWJlclxuICAgIGNvbW1lbnRJZDogc3RyaW5nIHwgbnVtYmVyXG4gICAgcmVhY3Rpb246IGtleW9mIFZzc3VlQVBJLlJlYWN0aW9uc1xuICB9KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLiRodHRwLnBvc3QoYHJlcG9zLyR7dGhpcy5vd25lcn0vJHt0aGlzLnJlcG99L2lzc3Vlcy9jb21tZW50cy8ke2NvbW1lbnRJZH0vcmVhY3Rpb25zYCwge1xuICAgICAgY29udGVudDogbWFwUmVhY3Rpb25OYW1lKHJlYWN0aW9uKSxcbiAgICB9LCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYHRva2VuICR7YWNjZXNzVG9rZW59YCxcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi92bmQuZ2l0aHViLnNxdWlycmVsLWdpcmwtcHJldmlldycsXG4gICAgICB9LFxuICAgIH0pXG4gICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAxXG4gIH1cbn1cbiJdfQ==