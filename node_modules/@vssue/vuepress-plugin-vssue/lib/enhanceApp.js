import Vssue from 'vssue';
// @ts-ignore
import VssueAPI from '@vssue/api';
import '../styles/index.styl';
export default (function (_a) {
    var Vue = _a.Vue;
    // options come from vuepress plugin config
    var vpOptions = JSON.parse(VSSUE_OPTIONS);
    Vue.use(Vssue, Object.assign({}, vpOptions, {
        api: VssueAPI,
    }));
    // get the vssue component registered by Vssue.Plugin
    var VssueComponent = Vue.component('Vssue');
    // make the vssue component client-only
    Vue.component('Vssue', {
        functional: true,
        /* eslint-disable-next-line vue/require-render-return */
        render: function (h, _a) {
            var parent = _a.parent, data = _a.data;
            // if locale is not set by user, use Vupress `$lang`
            if (!vpOptions.locale) {
                if (!data.attrs) {
                    data.attrs = {};
                }
                if (!data.attrs.options) {
                    data.attrs.options = {};
                }
                if (!data.attrs.options.locale) {
                    data.attrs.options.locale = parent.$lang || 'en';
                }
            }
            if (parent._isMounted) {
                return h(VssueComponent, data);
            }
            else {
                parent.$once('hook:mounted', function () {
                    parent.$forceUpdate();
                });
            }
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5oYW5jZUFwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lbmhhbmNlQXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUN6QixhQUFhO0FBQ2IsT0FBTyxRQUFRLE1BQU0sWUFBWSxDQUFBO0FBRWpDLE9BQU8sc0JBQXNCLENBQUE7QUFZN0IsZ0JBQWUsVUFBQyxFQUErQjtRQUE3QixZQUFHO0lBQ25CLDJDQUEyQztJQUMzQyxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBRTNDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRTtRQUMxQyxHQUFHLEVBQUUsUUFBUTtLQUNkLENBQUMsQ0FBQyxDQUFBO0lBRUgscURBQXFEO0lBQ3JELElBQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFN0MsdUNBQXVDO0lBQ3ZDLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFO1FBQ3JCLFVBQVUsRUFBRSxJQUFJO1FBRWhCLHdEQUF3RDtRQUN4RCxNQUFNLFlBQUUsQ0FBQyxFQUFFLEVBQWdCO2dCQUFkLGtCQUFNLEVBQUUsY0FBSTtZQUN2QixvREFBb0Q7WUFDcEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO29CQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFBO2lCQUNoQjtnQkFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7b0JBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQTtpQkFDeEI7Z0JBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtvQkFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFBO2lCQUNqRDthQUNGO1lBQ0QsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO2dCQUNyQixPQUFPLENBQUMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUE7YUFDL0I7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUU7b0JBQzNCLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQTtnQkFDdkIsQ0FBQyxDQUFDLENBQUE7YUFDSDtRQUNILENBQUM7S0FDRixDQUFDLENBQUE7QUFDSixDQUFDLEVBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnNzdWUgZnJvbSAndnNzdWUnXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgVnNzdWVBUEkgZnJvbSAnQHZzc3VlL2FwaSdcblxuaW1wb3J0ICcuLi9zdHlsZXMvaW5kZXguc3R5bCdcblxuaW1wb3J0IHsgVnVlQ29uc3RydWN0b3IgfSBmcm9tICd2dWUnXG5cbmRlY2xhcmUgY29uc3QgVlNTVUVfT1BUSU9OUzogc3RyaW5nXG5cbmRlY2xhcmUgbW9kdWxlICd2dWUvdHlwZXMvdnVlJyB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgVnVlQ29uc3RydWN0b3Ige1xuICAgIGNvbXBvbmVudDxQcm9wcz4oaWQ6IHN0cmluZywgZGVmaW5pdGlvbjogYW55KTogRXh0ZW5kZWRWdWU8VnVlLCB7fSwge30sIHt9LCBQcm9wcz5cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCAoeyBWdWUgfTogeyBWdWU6IFZ1ZUNvbnN0cnVjdG9yfSkgPT4ge1xuICAvLyBvcHRpb25zIGNvbWUgZnJvbSB2dWVwcmVzcyBwbHVnaW4gY29uZmlnXG4gIGNvbnN0IHZwT3B0aW9ucyA9IEpTT04ucGFyc2UoVlNTVUVfT1BUSU9OUylcblxuICBWdWUudXNlKFZzc3VlLCBPYmplY3QuYXNzaWduKHt9LCB2cE9wdGlvbnMsIHtcbiAgICBhcGk6IFZzc3VlQVBJLFxuICB9KSlcblxuICAvLyBnZXQgdGhlIHZzc3VlIGNvbXBvbmVudCByZWdpc3RlcmVkIGJ5IFZzc3VlLlBsdWdpblxuICBjb25zdCBWc3N1ZUNvbXBvbmVudCA9IFZ1ZS5jb21wb25lbnQoJ1Zzc3VlJylcblxuICAvLyBtYWtlIHRoZSB2c3N1ZSBjb21wb25lbnQgY2xpZW50LW9ubHlcbiAgVnVlLmNvbXBvbmVudCgnVnNzdWUnLCB7XG4gICAgZnVuY3Rpb25hbDogdHJ1ZSxcblxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2dWUvcmVxdWlyZS1yZW5kZXItcmV0dXJuICovXG4gICAgcmVuZGVyIChoLCB7IHBhcmVudCwgZGF0YSB9KSB7XG4gICAgICAvLyBpZiBsb2NhbGUgaXMgbm90IHNldCBieSB1c2VyLCB1c2UgVnVwcmVzcyBgJGxhbmdgXG4gICAgICBpZiAoIXZwT3B0aW9ucy5sb2NhbGUpIHtcbiAgICAgICAgaWYgKCFkYXRhLmF0dHJzKSB7XG4gICAgICAgICAgZGF0YS5hdHRycyA9IHt9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkYXRhLmF0dHJzLm9wdGlvbnMpIHtcbiAgICAgICAgICBkYXRhLmF0dHJzLm9wdGlvbnMgPSB7fVxuICAgICAgICB9XG4gICAgICAgIGlmICghZGF0YS5hdHRycy5vcHRpb25zLmxvY2FsZSkge1xuICAgICAgICAgIGRhdGEuYXR0cnMub3B0aW9ucy5sb2NhbGUgPSBwYXJlbnQuJGxhbmcgfHwgJ2VuJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgcmV0dXJuIGgoVnNzdWVDb21wb25lbnQsIGRhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQuJG9uY2UoJ2hvb2s6bW91bnRlZCcsICgpID0+IHtcbiAgICAgICAgICBwYXJlbnQuJGZvcmNlVXBkYXRlKClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICB9KVxufVxuIl19