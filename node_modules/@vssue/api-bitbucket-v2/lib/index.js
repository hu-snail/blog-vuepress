import * as tslib_1 from "tslib";
import axios from 'axios';
import { buildQuery, buildURL, concatURL, getCleanURL, parseQuery, } from '@vssue/utils';
import { normalizeUser, normalizeIssue, normalizeComment, } from './utils';
/**
 * Bitbucket API V2
 *
 * @see https://developer.atlassian.com/bitbucket/api/2/reference/
 * @see https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html
 */
var BitbucketV2 = /** @class */ (function () {
    function BitbucketV2(_a) {
        var _b = _a.baseURL, baseURL = _b === void 0 ? 'https://bitbucket.org' : _b, owner = _a.owner, repo = _a.repo, clientId = _a.clientId, clientSecret = _a.clientSecret, state = _a.state;
        this.baseURL = baseURL;
        this.owner = owner;
        this.repo = repo;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.state = state;
        this.$http = axios.create({
            baseURL: 'https://api.bitbucket.org/2.0',
            headers: {
                'Accept': 'application/json',
            },
        });
    }
    Object.defineProperty(BitbucketV2.prototype, "platform", {
        /**
         * The platform api info
         */
        get: function () {
            return {
                name: 'Bitbucket',
                link: this.baseURL,
                version: 'v2',
                meta: {
                    reactable: false,
                    sortable: true,
                },
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Redirect to the authorization page of platform.
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/authentication#oauth-2
     */
    BitbucketV2.prototype.redirectAuth = function () {
        window.location.href = buildURL(concatURL(this.baseURL, 'site/oauth2/authorize'), {
            client_id: this.clientId,
            redirect_uri: window.location.href,
            response_type: 'code',
        });
    };
    /**
     * Handle authorization.
     *
     * @return A string for access token, `null` for no authorization code
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/authentication#oauth-2
     *
     * @remarks
     * If the `code` exists in the query, remove them from query, and try to get the access token.
     */
    BitbucketV2.prototype.handleAuth = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var query, code, replaceURL, accessToken;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = parseQuery(window.location.search);
                        if (!query.code) return [3 /*break*/, 2];
                        code = query.code;
                        delete query.code;
                        replaceURL = buildURL(getCleanURL(window.location.href), query) + window.location.hash;
                        window.history.replaceState(null, '', replaceURL);
                        return [4 /*yield*/, this.getAccessToken({ code: code })];
                    case 1:
                        accessToken = _a.sent();
                        return [2 /*return*/, accessToken];
                    case 2: return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Get user access token via `code`
     *
     * @param options.code - The code from the query
     *
     * @return User access token
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/authentication#oauth-2
     */
    BitbucketV2.prototype.getAccessToken = function (_a) {
        var code = _a.code;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.post("https://cors-anywhere.herokuapp.com/" + concatURL(this.baseURL, 'site/oauth2/access_token'), buildQuery({
                            grant_type: 'authorization_code',
                            redirect_uri: window.location.href,
                            code: code,
                        }), {
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                            },
                            auth: {
                                username: this.clientId,
                                password: this.clientSecret,
                            },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.access_token];
                }
            });
        });
    };
    /**
     * Get the logined user with access token.
     *
     * @param options.accessToken - User access token
     *
     * @return The user
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/user
     */
    BitbucketV2.prototype.getUser = function (_a) {
        var accessToken = _a.accessToken;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.get('user', {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeUser(data)];
                }
            });
        });
    };
    /**
     * Get issue of this page according to the issue id or the issue title
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.issueTitle - The title of issue
     *
     * @return The raw response of issue
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D#get
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues#get
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/pagination
     */
    BitbucketV2.prototype.getIssue = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, issueTitle = _a.issueTitle;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options, data, e_1, data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = {};
                        if (accessToken) {
                            options.headers = {
                                'Authorization': "Bearer " + accessToken,
                            };
                        }
                        if (!issueId) return [3 /*break*/, 5];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        options.params = {
                            // to avoid caching
                            timestamp: Date.now(),
                        };
                        return [4 /*yield*/, this.$http.get("repositories/" + this.owner + "/" + this.repo + "/issues/" + issueId, options)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeIssue(data)];
                    case 3:
                        e_1 = _b.sent();
                        if (e_1.response && e_1.response.status === 404) {
                            return [2 /*return*/, null];
                        }
                        else {
                            throw e_1;
                        }
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        options.params = {
                            sort: 'created_on',
                            q: "title=\"" + issueTitle + "\"",
                            // to avoid caching
                            timestamp: Date.now(),
                        };
                        return [4 /*yield*/, this.$http.get("repositories/" + this.owner + "/" + this.repo + "/issues", options)];
                    case 6:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.size > 0 ? normalizeIssue(data.values[0]) : null];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create a new issue
     *
     * @param options.accessToken - User access token
     * @param options.title - The title of issue
     * @param options.content - The content of issue
     *
     * @return The created issue
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues#post
     */
    BitbucketV2.prototype.postIssue = function (_a) {
        var accessToken = _a.accessToken, title = _a.title, content = _a.content;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.post("repositories/" + this.owner + "/" + this.repo + "/issues", {
                            title: title,
                            content: {
                                raw: content,
                            },
                            priority: 'trivial',
                            type: 'task',
                        }, {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeIssue(data)];
                }
            });
        });
    };
    /**
     * Get comments of this page according to the issue id or the issue title
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.query - The query parameters
     *
     * @return The comments
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#post
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/meta/pagination
     */
    BitbucketV2.prototype.getComments = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, _b = _a.query, _c = _b === void 0 ? {} : _b, _d = _c.page, page = _d === void 0 ? 1 : _d, _e = _c.perPage, perPage = _e === void 0 ? 10 : _e, _f = _c.sort, sort = _f === void 0 ? 'desc' : _f;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options, data;
            return tslib_1.__generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        options = {
                            params: {
                                // pagination
                                'page': page,
                                'pagelen': perPage,
                                'sort': sort === 'desc' ? '-created_on' : 'created_on',
                                // to avoid caching
                                timestamp: Date.now(),
                            },
                        };
                        if (accessToken) {
                            options.headers = {
                                'Authorization': "Bearer " + accessToken,
                            };
                        }
                        return [4 /*yield*/, this.$http.get("repositories/" + this.owner + "/" + this.repo + "/issues/" + issueId + "/comments", options)];
                    case 1:
                        data = (_g.sent()).data;
                        return [2 /*return*/, {
                                count: data.size,
                                page: data.page,
                                perPage: data.pagelen,
                                data: data.values.map(normalizeComment),
                            }];
                }
            });
        });
    };
    /**
     * Create a new comment
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.content - The content of comment
     *
     * @return The created comment
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#post
     */
    BitbucketV2.prototype.postComment = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, content = _a.content;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.post("repositories/" + this.owner + "/" + this.repo + "/issues/" + issueId + "/comments", {
                            content: {
                                raw: content,
                            },
                        }, {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeComment(data)];
                }
            });
        });
    };
    /**
     * Edit a comment
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.commentId - The id of comment
     * @param options.content - The content of comment
     *
     * @return The edited comment
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#put
     */
    BitbucketV2.prototype.putComment = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, commentId = _a.commentId, content = _a.content;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.put("repositories/" + this.owner + "/" + this.repo + "/issues/" + issueId + "/comments/" + commentId, {
                            content: {
                                raw: content,
                            },
                        }, {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeComment(data)];
                }
            });
        });
    };
    /**
     * Delete a comment
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.commentId - The id of comment
     *
     * @return `true` if succeed, `false` if failed
     *
     * @see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#delete
     */
    BitbucketV2.prototype.deleteComment = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, commentId = _a.commentId;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var status;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.delete("repositories/" + this.owner + "/" + this.repo + "/issues/" + issueId + "/comments/" + commentId, {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        status = (_b.sent()).status;
                        return [2 /*return*/, status === 204];
                }
            });
        });
    };
    /**
     * Bitbucket does not support reactions now
     */
    BitbucketV2.prototype.getCommentReactions = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                throw new Error('501 Not Implemented');
            });
        });
    };
    /**
     * Bitbucket does not support reactions now
     */
    BitbucketV2.prototype.postCommentReaction = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                throw new Error('501 Not Implemented');
            });
        });
    };
    return BitbucketV2;
}());
export default BitbucketV2;
//# sourceMappingURL=data:application/json;base64,