import * as tslib_1 from "tslib";
import axios from 'axios';
import { buildURL, concatURL, getCleanURL, parseQuery, } from '@vssue/utils';
import { normalizeUser, normalizeIssue, normalizeComment, normalizeReactions, mapReactionName, } from './utils';
/**
 * GitLab API V4
 *
 * @see https://docs.gitlab.com/ce/api/
 * @see https://docs.gitlab.com/ce/api/oauth2.html
 */
var GitlabV4 = /** @class */ (function () {
    function GitlabV4(_a) {
        var _b = _a.baseURL, baseURL = _b === void 0 ? 'https://gitlab.com' : _b, owner = _a.owner, repo = _a.repo, labels = _a.labels, clientId = _a.clientId, clientSecret = _a.clientSecret, state = _a.state;
        this.baseURL = baseURL;
        this.owner = owner;
        this.repo = repo;
        this.labels = labels.join(',');
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.state = state;
        // @see https://docs.gitlab.com/ce/api/README.html#namespaced-path-encoding
        this._encodedRepo = encodeURIComponent(this.owner + "/" + this.repo);
        this.$http = axios.create({
            baseURL: baseURL,
            headers: {
                'Accept': 'application/json',
            },
        });
    }
    Object.defineProperty(GitlabV4.prototype, "platform", {
        /**
         * The platform api info
         */
        get: function () {
            return {
                name: 'GitLab',
                link: this.baseURL,
                version: 'v4',
                meta: {
                    reactable: true,
                    sortable: true,
                },
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Redirect to the authorization page of platform.
     *
     * @see https://docs.gitlab.com/ce/api/oauth2.html#1-requesting-authorization-code
     */
    GitlabV4.prototype.redirectAuth = function () {
        window.location.href = buildURL(concatURL(this.baseURL, 'oauth/authorize'), {
            client_id: this.clientId,
            redirect_uri: window.location.href,
            response_type: 'code',
            state: this.state,
        });
    };
    /**
     * Handle authorization.
     *
     * @return A string for access token, `null` for no authorization code
     *
     * @see https://docs.gitlab.com/ce/api/oauth2.html#supported-oauth2-flows
     *
     * @remarks
     * If the `code` and `state` exist in the query, and the `state` matches, remove them from query, and try to get the access token.
     */
    GitlabV4.prototype.handleAuth = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var query, code, replaceURL, accessToken;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = parseQuery(window.location.search);
                        if (!query.code) return [3 /*break*/, 2];
                        if (query.state !== this.state) {
                            return [2 /*return*/, null];
                        }
                        code = query.code;
                        delete query.code;
                        delete query.state;
                        replaceURL = buildURL(getCleanURL(window.location.href), query) + window.location.hash;
                        window.history.replaceState(null, '', replaceURL);
                        return [4 /*yield*/, this.getAccessToken({ code: code })];
                    case 1:
                        accessToken = _a.sent();
                        return [2 /*return*/, accessToken];
                    case 2: return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Get user access token via `code`
     *
     * @param options.code - The code from the query
     *
     * @return User access token
     *
     * @see https://docs.gitlab.com/ce/api/oauth2.html#2-requesting-access-token
     */
    GitlabV4.prototype.getAccessToken = function (_a) {
        var code = _a.code;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.post("https://cors-anywhere.herokuapp.com/" + concatURL(this.baseURL, 'oauth/token'), {
                            client_id: this.clientId,
                            client_secret: this.clientSecret,
                            code: code,
                            grant_type: 'authorization_code',
                            redirect_uri: window.location.href,
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.access_token];
                }
            });
        });
    };
    /**
     * Get the logined user with access token.
     *
     * @param options.accessToken - User access token
     *
     * @return The user
     */
    GitlabV4.prototype.getUser = function (_a) {
        var accessToken = _a.accessToken;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.get('api/v4/user', {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeUser(data)];
                }
            });
        });
    };
    /**
     * Get issue of this page according to the issue id or the issue title
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.issueTitle - The title of issue
     *
     * @return The issue
     *
     * @see https://docs.gitlab.com/ce/api/issues.html#single-issue
     * @see https://docs.gitlab.com/ce/api/issues.html#list-issues
     * @see https://docs.gitlab.com/ce/api/README.html#pagination
     */
    GitlabV4.prototype.getIssue = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, issueTitle = _a.issueTitle;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options, data, e_1, data, issue;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = {};
                        if (accessToken) {
                            options.headers = {
                                'Authorization': "Bearer " + accessToken,
                            };
                        }
                        if (!issueId) return [3 /*break*/, 5];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.$http.get("api/v4/projects/" + this._encodedRepo + "/issues/" + issueId, options)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeIssue(data)];
                    case 3:
                        e_1 = _b.sent();
                        if (e_1.response && e_1.response.status === 404) {
                            return [2 /*return*/, null];
                        }
                        else {
                            throw e_1;
                        }
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        options.params = {
                            labels: this.labels,
                            order_by: 'created_at',
                            sort: 'asc',
                            search: issueTitle,
                        };
                        return [4 /*yield*/, this.$http.get("api/v4/projects/" + this._encodedRepo + "/issues", options)];
                    case 6:
                        data = (_b.sent()).data;
                        issue = data.map(normalizeIssue).find(function (item) { return item.title === issueTitle; });
                        return [2 /*return*/, issue || null];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create a new issue
     *
     * @param options.accessToken - User access token
     * @param options.title - The title of issue
     * @param options.content - The content of issue
     *
     * @return The created issue
     *
     * @see https://docs.gitlab.com/ce/api/issues.html#new-issue
     */
    GitlabV4.prototype.postIssue = function (_a) {
        var accessToken = _a.accessToken, title = _a.title, content = _a.content;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.post("api/v4/projects/" + this._encodedRepo + "/issues", {
                            title: title,
                            description: content,
                            labels: this.labels,
                        }, {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeIssue(data)];
                }
            });
        });
    };
    /**
     * Get comments of this page according to the issue id or the issue title
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.query - The query parameters
     *
     * @return The comments
     *
     * @see https://docs.gitlab.com/ce/api/notes.html#list-project-issue-notes
     * @see https://docs.gitlab.com/ce/api/README.html#pagination
     *
     * @remarks
     * Cannot get the HTML content and the reactions (award_emoji) here.
     * So have to request them via `markdown` and `award_emoji` API.
     */
    GitlabV4.prototype.getComments = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, _b = _a.query, _c = _b === void 0 ? {} : _b, _d = _c.page, page = _d === void 0 ? 1 : _d, _e = _c.perPage, perPage = _e === void 0 ? 10 : _e, _f = _c.sort, sort = _f === void 0 ? 'desc' : _f;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_2, _g, options, response, commentsRaw, getCommentsMeta, _loop_1, commentsRaw_1, commentsRaw_1_1, comment;
            var _this = this;
            return tslib_1.__generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        options = {
                            params: {
                                // pagination
                                'page': page,
                                'per_page': perPage,
                                'order_by': 'created_at',
                                'sort': sort,
                            },
                        };
                        if (accessToken) {
                            options.headers = {
                                'Authorization': "Bearer " + accessToken,
                            };
                        }
                        return [4 /*yield*/, this.$http.get("api/v4/projects/" + this._encodedRepo + "/issues/" + issueId + "/notes", options)];
                    case 1:
                        response = _h.sent();
                        commentsRaw = response.data;
                        getCommentsMeta = [];
                        _loop_1 = function (comment) {
                            getCommentsMeta.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var _a;
                                return tslib_1.__generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _a = comment;
                                            return [4 /*yield*/, this.getMarkdownContent({
                                                    accessToken: accessToken,
                                                    contentRaw: comment.body,
                                                })];
                                        case 1:
                                            _a.body_html = _b.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })());
                            getCommentsMeta.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var _a;
                                return tslib_1.__generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _a = comment;
                                            return [4 /*yield*/, this.getCommentReactions({
                                                    accessToken: accessToken,
                                                    issueId: issueId,
                                                    commentId: comment.id,
                                                })];
                                        case 1:
                                            _a.reactions = _b.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })());
                        };
                        try {
                            for (commentsRaw_1 = tslib_1.__values(commentsRaw), commentsRaw_1_1 = commentsRaw_1.next(); !commentsRaw_1_1.done; commentsRaw_1_1 = commentsRaw_1.next()) {
                                comment = commentsRaw_1_1.value;
                                _loop_1(comment);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (commentsRaw_1_1 && !commentsRaw_1_1.done && (_g = commentsRaw_1.return)) _g.call(commentsRaw_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        return [4 /*yield*/, Promise.all(getCommentsMeta)];
                    case 2:
                        _h.sent();
                        return [2 /*return*/, {
                                count: Number(response.headers['x-total']),
                                page: Number(response.headers['x-page']),
                                perPage: Number(response.headers['x-per-page']),
                                data: commentsRaw.map(normalizeComment),
                            }];
                }
            });
        });
    };
    /**
     * Create a new comment
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.content - The content of comment
     *
     * @return The created comment
     *
     * @see https://docs.gitlab.com/ce/api/notes.html#create-new-issue-note
     */
    GitlabV4.prototype.postComment = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, content = _a.content;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.post("api/v4/projects/" + this._encodedRepo + "/issues/" + issueId + "/notes", {
                            body: content,
                        }, {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeComment(data)];
                }
            });
        });
    };
    /**
     * Edit a comment
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.commentId - The id of comment
     * @param options.content - The content of comment
     *
     * @return The edited comment
     *
     * @see https://docs.gitlab.com/ce/api/notes.html#modify-existing-issue-note
     */
    GitlabV4.prototype.putComment = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, commentId = _a.commentId, content = _a.content;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, _b, contentHTML, reactions;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.$http.put("api/v4/projects/" + this._encodedRepo + "/issues/" + issueId + "/notes/" + commentId, {
                            body: content,
                        }, {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        data = (_c.sent()).data;
                        return [4 /*yield*/, Promise.all([
                                this.getMarkdownContent({
                                    accessToken: accessToken,
                                    contentRaw: data.body,
                                }),
                                this.getCommentReactions({
                                    accessToken: accessToken,
                                    issueId: issueId,
                                    commentId: data.id,
                                }),
                            ])];
                    case 2:
                        _b = tslib_1.__read.apply(void 0, [_c.sent(), 2]), contentHTML = _b[0], reactions = _b[1];
                        data.body_html = contentHTML;
                        data.reactions = reactions;
                        return [2 /*return*/, normalizeComment(data)];
                }
            });
        });
    };
    /**
     * Delete a comment
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.commentId - The id of comment
     *
     * @return `true` if succeed, `false` if failed
     *
     * @see https://docs.gitlab.com/ce/api/notes.html#delete-an-issue-note
     */
    GitlabV4.prototype.deleteComment = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, commentId = _a.commentId;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var status;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.delete("api/v4/projects/" + this._encodedRepo + "/issues/" + issueId + "/notes/" + commentId, {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        status = (_b.sent()).status;
                        return [2 /*return*/, status === 204];
                }
            });
        });
    };
    /**
     * Get reactions of a comment
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.commentId - The id of comment
     *
     * @return The comments
     *
     * @see https://docs.gitlab.com/ce/api/award_emoji.html#list-an-awardables-award-emoji
     */
    GitlabV4.prototype.getCommentReactions = function (_a) {
        var accessToken = _a.accessToken, issueId = _a.issueId, commentId = _a.commentId;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.$http.get("api/v4/projects/" + this._encodedRepo + "/issues/" + issueId + "/notes/" + commentId + "/award_emoji", {
                            headers: { 'Authorization': "Bearer " + accessToken },
                        })];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, normalizeReactions(data)];
                }
            });
        });
    };
    /**
     * Create a new reaction of a comment
     *
     * @param options.accessToken - User access token
     * @param options.issueId - The id of issue
     * @param options.commentId - The id of comment
     * @param options.reaction - The reaction
     *
     * @return `true` if succeed, `false` if already token
     *
     * @see https://docs.gitlab.com/ce/api/award_emoji.html#award-a-new-emoji
     */
    GitlabV4.prototype.postCommentReaction = function (_a) {
        var issueId = _a.issueId, commentId = _a.commentId, reaction = _a.reaction, accessToken = _a.accessToken;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response, e_3;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.$http.post("api/v4/projects/" + this._encodedRepo + "/issues/" + issueId + "/notes/" + commentId + "/award_emoji", {
                                name: mapReactionName(reaction),
                            }, {
                                headers: {
                                    'Authorization': "Bearer " + accessToken,
                                },
                            })];
                    case 1:
                        response = _b.sent();
                        return [2 /*return*/, response.status === 201];
                    case 2:
                        e_3 = _b.sent();
                        // it could be a bug of gitlab
                        // if a reaction (award emoji) has already existed, it returns a 404 response with a buggy message
                        // have submitted an issue: https://gitlab.com/gitlab-org/gitlab-ce/issues/56147
                        if (e_3.response && e_3.response.status === 404) {
                            return [2 /*return*/, false];
                        }
                        else {
                            throw e_3;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the parse HTML of markdown content
     *
     * @param options.accessToken - User access token
     * @param options.contentRaw - The id of issue
     *
     * @return The HTML string of parsed markdown
     *
     * @see https://docs.gitlab.com/ce/api/markdown.html
     */
    GitlabV4.prototype.getMarkdownContent = function (_a) {
        var accessToken = _a.accessToken, contentRaw = _a.contentRaw;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options, data;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options = {};
                        if (accessToken) {
                            options.headers = {
                                'Authorization': "Bearer " + accessToken,
                            };
                        }
                        return [4 /*yield*/, this.$http.post("api/v4/markdown", {
                                text: contentRaw,
                                gfm: true,
                            }, options)];
                    case 1:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.html];
                }
            });
        });
    };
    return GitlabV4;
}());
export default GitlabV4;
//# sourceMappingURL=data:application/json;base64,